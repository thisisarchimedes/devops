name: Commit Stage

on:
    push:
      branches-ignore:
        - 'main' 

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  ALCHEMY_RPC_URL: ${{ secrets.ALCHEMY_RPC_URL }}
  INFURA_RPC_URL: ${{ secrets.INFURA_RPC_URL }}
  ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
  INFURA_GAS_API_KEY: ${{ secrets.INFURA_GAS_API_KEY }}
  INFURA_GAS_API_SECRET: ${{ secrets.INFURA_GAS_API_SECRET }}
  _0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266: ${{ secrets._0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266 }}
  API_DEVOPS_EVENT_CATCHER: ${{ secrets.API_DEVOPS_EVENT_CATCHER }}
  DEVOPS_EVENTS_SECRET_TOKEN: ${{ secrets.DEVOPS_EVENTS_SECRET_TOKEN }}
  
jobs:
  commiting:
    runs-on: ubuntu-latest
    steps:
      - name: Set env variables
        run: |
            echo "TEST_PASS=true" >> $GITHUB_ENV
            echo "REPORT_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"  >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Run docker-compose
        uses: isbang/compose-action@v1.5.1
        with:
          compose-file: './docker-compose.yml'
          services: |
            db

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install

      - name: Run linter
        run: yarn lint

      - name: run hardhat node
        run: |
          yarn hardhat node &

      - name: run migrate to database
        run: |
          yarn migrate:deploy

      - name: Run yarn Tests
        run: |
          yarn test

      - name: Checking Test Coverage
        run: |
          npx hardhat coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Update TEST_PASS on failure
        if: failure()
        run: echo "TEST_PASS=false" >> $GITHUB_ENV
    
      - name: Report stage result
        if: always()
        run: |
            yarn add axios dotenv
            node devops/metrics/src/cicd_script/report_devops_event.js ${{ github.repository }} push '{"pass": "${{ env.TEST_PASS }}", "commit_id": "${{ github.sha }}" ,"report_url": "${{ env.REPORT_URL }}"}'
      
    